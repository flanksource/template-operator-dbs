apiVersion: templating.flanksource.com/v1
kind: Template
metadata:
  name: postgresql-db
spec:
  source:
    apiVersion: db.flanksource.com/v1
    kind: PostgresqlDB
  resources:
    - apiVersion: acid.zalan.do/v1
      kind: postgresql
      metadata:
        name: postgres-{{.metadata.name}}
        namespace: postgres-operator
      spec:
        additionalVolumes:
          - mountPath: /opt/extra-queries
            name: exporter-extra-queries
            subPath: ""
            targetContainers:
              - exporter
            volumeSource:
              configMap:
                name: postgres-exporter-config
        allowedSourceRanges: null
        dockerImage: docker.io/flanksource/spilo:1.6-p2.flanksource
        enableShmVolume: true
        env:
          - name: BACKUP_SCHEDULE
            value: '*/5 * * * *'
          - name: USE_WALG_RESTORE
            value: "false"
          - name: USE_WALG_BACKUP
            value: "false"
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: postgres-operator-cluster-environment
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: postgres-operator-cluster-environment
          - name: AWS_ENDPOINT
            valueFrom:
              secretKeyRef:
                key: AWS_ENDPOINT
                name: postgres-operator-cluster-environment
          - name: AWS_S3_FORCE_PATH_STYLE
            valueFrom:
              secretKeyRef:
                key: AWS_S3_FORCE_PATH_STYLE
                name: postgres-operator-cluster-environment
          - name: WAL_BUCKET_SCOPE_SUFFIX
          - name: WALG_S3_PREFIX
            value: '{{.spec.backup.bucket}}'
          - name: CLONE_WAL_BUCKET_SCOPE_SUFFIX
            value: /
        numberOfInstances: '{{ .spec.replicas | default "2" }}'
        patroni:
          initdb:
            data-checksums: "true"
            encoding: UTF8
            locale: en_US.UTF-8
          loop_wait: 10
          maximum_lag_on_failover: 33554432
          pg_hba:
            - hostssl all all 0.0.0.0/0 md5
            - host    all all 0.0.0.0/0 md5
          retry_timeout: 10
          slots: {}
          synchronous_mode: false
          synchronous_mode_strict: false
          ttl: 30
        podAnnotations: {}
        postgresql:
          parameters: '{{ .spec.parameters | default (coll.Dict) | data.ToJSON }}'
          version: "12"
        resources:
          limits:
            cpu: '{{.spec.resources.limits.cpu | default .spec.cpu | default "1000m"}}'
            memory: '{{.spec.resources.limits.memory | default .spec.memory | default "512Mi"}}'
          requests:
            cpu: '{{.spec.resources.requests.cpu | default .spec.cpu |  default "100m"}}'
            memory: '{{.spec.resources.requests.memory | default .spec.memory  |   default "128Mi"}}'
        serviceAnnotations: {}
        sidecars:
          - env:
              - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
                value: :9187
              - name: DATA_SOURCE_URI
                value: localhost?sslmode=disable
              - name: DATA_SOURCE_USER
                valueFrom:
                  secretKeyRef:
                    key: username
                    name: postgres.postgres-{{.metadata.name}}.credentials
              - name: DATA_SOURCE_PASS
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: postgres.postgres-{{.metadata.name}}.credentials
              - name: PG_EXPORTER_EXTEND_QUERY_PATH
                value: /opt/extra-queries/queries.yaml
            image: docker.io/bitnami/postgres-exporter:0.8.0
            name: exporter
            ports:
              - containerPort: 9187
                name: exporter
                protocol: TCP
            resources:
              limits:
                cpu: 200m
                memory: 128Mi
              requests:
                cpu: 10m
                memory: 128Mi
        teamId: postgres
        tls: null
        users:
          app:
            - createdb
            - superuser
        volume:
          size: '{{ .spec.storage.size | default "20Gi" }}'
          storageClass: '{{ .spec.storage.storageClass | default "" }}'
    - apiVersion: v1
      kind: Secret
      metadata:
        name: backup-postgres-{{ .metadata.name }}-config
        namespace: postgres-operator
      data:
        AWS_ACCESS_KEY_ID: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "AWS_ACCESS_KEY_ID" }}'
        AWS_SECRET_ACCESS_KEY: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "AWS_SECRET_ACCESS_KEY" }}'
        AWS_ENDPOINT_URL: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "AWS_ENDPOINT_URL" }}'
        AWS_REGION: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "AWS_REGION" }}'
        RESTIC_PASSWORD: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_PASSWORD" }}'
        BACKUP_IMAGE: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_IMAGE" }}'
        BACKUP_S3_BUCKET: '{{ .spec.backup.bucket | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_S3_BUCKET") }}'
        BACKUP_SCHEDULE: '{{ .spec.backup.schedule | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_SCHEDULE") }}'
        BACKUP_RETENTION_KEEP_LAST: '{{ .spec.backup.retention.keepLast | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_LAST") }}'
        BACKUP_RETENTION_KEEP_HOURLY: '{{ .spec.backup.retention.keepHourly | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_HOURLY") }}'
        BACKUP_RETENTION_KEEP_DAILY: '{{ .spec.backup.retention.keepDaily | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_DAILY") }}'
        BACKUP_RETENTION_KEEP_WEEKLY: '{{ .spec.backup.retention.keepWeekly | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_WEEKLY") }}'
        BACKUP_RETENTION_KEEP_MONTHLY: '{{ .spec.backup.retention.keepMonthly | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_MONTHLY") }}'
        BACKUP_RETENTION_KEEP_YEARLY: '{{ .spec.backup.retention.keepYearly | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_YEARLY") }}'
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: backup-postgres-{{.metadata.name}}
        namespace: postgres-operator
      spec:
        concurrencyPolicy: Forbid
        failedJobsHistoryLimit: 1
        jobTemplate:
          spec:
            template:
              metadata:
                labels:
                  application: postgres-logical-backup
                  cluster-name: postgres-{{.metadata.name}}
              spec:
                containers:
                  - env:
                      - name: AWS_ACCESS_KEY_ID
                        valueFrom:
                          secretKeyRef:
                            key: AWS_ACCESS_KEY_ID
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: AWS_SECRET_ACCESS_KEY
                        valueFrom:
                          secretKeyRef:
                            key: AWS_SECRET_ACCESS_KEY
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: AWS_ENDPOINT_URL
                        valueFrom:
                          secretKeyRef:
                            key: AWS_ENDPOINT_URL
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: AWS_DEFAULT_REGION
                        valueFrom:
                          secretKeyRef:
                            key: AWS_REGION
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: BACKUP_S3_BUCKET
                        valueFrom:
                          secretKeyRef:
                            key: BACKUP_S3_BUCKET
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: RESTIC_REPOSITORY
                        value: s3:$(AWS_ENDPOINT_URL)/$(BACKUP_S3_BUCKET)
                      - name: RESTIC_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            key: RESTIC_PASSWORD
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: BACKUP_RETENTION_KEEP_LAST
                        valueFrom:
                          secretKeyRef:
                            key: BACKUP_RETENTION_KEEP_LAST
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: BACKUP_RETENTION_KEEP_HOURLY
                        valueFrom:
                          secretKeyRef:
                            key: BACKUP_RETENTION_KEEP_HOURLY
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: BACKUP_RETENTION_KEEP_DAILY
                        valueFrom:
                          secretKeyRef:
                            key: BACKUP_RETENTION_KEEP_DAILY
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: BACKUP_RETENTION_KEEP_WEEKLY
                        valueFrom:
                          secretKeyRef:
                            key: BACKUP_RETENTION_KEEP_WEEKLY
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: BACKUP_RETENTION_KEEP_MONTHLY
                        valueFrom:
                          secretKeyRef:
                            key: BACKUP_RETENTION_KEEP_MONTHLY
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: BACKUP_RETENTION_KEEP_YEARLY
                        valueFrom:
                          secretKeyRef:
                            key: BACKUP_RETENTION_KEEP_YEARLY
                            name: backup-postgres-{{ .metadata.name }}-config
                      - name: PGPASSWORD
                        valueFrom:
                          secretKeyRef:
                            key: password
                            name: postgres.postgres-{{.metadata.name}}.credentials
                      - name: PGHOST
                        value: postgres-{{.metadata.name}}
                      - name: PGPORT
                        value: "5432"
                      - name: PGSSLMODE
                        value: prefer
                      - name: PGDATABASE
                        value: postgres
                      - name: PGUSER
                        value: postgres
                      - name: PG_VERSION
                        value: "12"
                    image: '{{ kget (print "secret/postgres-operator/backup-postgres-" .metadata.name "-config") "BACKUP_SCHEDULE" }}'
                    imagePullPolicy: IfNotPresent
                    name: backup-postgres-{{.metadata.name}}
                    resources:
                      limits:
                        cpu: 500m
                        memory: 512Mi
                      requests:
                        cpu: 10m
                        memory: 128Mi
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                dnsPolicy: ClusterFirst
                restartPolicy: Never
                schedulerName: default-scheduler
                terminationGracePeriodSeconds: 30
        schedule: '{{ kget (print "secret/postgres-operator/backup-postgres-" .metadata.name "-config") "BACKUP_IMAGE" }}'
        successfulJobsHistoryLimit: 3
        suspend: false
    - apiVersion: canaries.flanksource.com/v1
      kind: Canary
      metadata:
        name: postgres-backup-{{.metadata.name}}
        namespace: postgres-operator
      spec:
        interval: 14400 #4h
        env:
          AWS_SECRET_ACCESS_KEY:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: postgres-operator-cluster-environment
          AWS_ACCESS_KEY_ID:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: postgres-operator-cluster-environment
          AWS_ENDPOINT:
            secretKeyRef:
              key: AWS_ENDPOINT_URL
              name: postgres-operator-cluster-environment
          LOGICAL_BACKUP_S3_REGION:
            secretKeyRef:
              key: AWS_REGION
              name: postgres-operator-cluster-environment
        s3Bucket:
          - description: '{{.metadata.name}} (backup)'
            bucket: '{{ kget (print "secret/postgres-operator/backup-postgres-" .metadata.name "-config") "LOGICAL_BACKUP_S3_BUCKET" }}'
            region: $LOGICAL_BACKUP_S3_REGION
            endpoint: $AWS_ENDPOINT
            secretKey: $AWS_SECRET_ACCESS_KEY
            accessKey: $AWS_ACCESS_KEY_ID
            objectPath: postgres-{{.metadata.name}}
            minSize: 10240 # 10KiB
            maxAge: 86400 # 24 hours
            usePathStyle: true
    - apiVersion: canaries.flanksource.com/v1
      kind: Canary
      metadata:
        name: postgres-connection-{{.metadata.name}}
        namespace: postgres-operator
        annotations:
          # don't let quack try and template username and password
          quack.pusher.com/left-delim: '[['
          quack.pusher.com/right-delim: ']]'
      spec:
        interval: 30
        env:
          username:
            secretKeyRef:
              key: username
              name: postgres.postgres-{{.metadata.name}}.credentials
          password:
            secretKeyRef:
              key: password
              name: postgres.postgres-{{.metadata.name}}.credentials
        postgres:
          - connection: user={{ "{{" }}.username{{ "}}" }} password={{ "{{" }}.password{{ "}}" }} host=postgres-{{.metadata.name}}.postgres-operator port=5432 dbname=postgres sslmode=disable
            query: SELECT 1
            results: 1
            driver: postgres
            description: '{{.metadata.name}} (heartbeat)'
